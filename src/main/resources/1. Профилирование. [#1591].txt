jmap -histo
В программе производится добавление 400 тысяч заявок в хранилище.
Утилита jmap -histo вызывалась несколько раз в процессе добавления заявок в хранилище. Шаг вызова утилиты ~15 секунд. Во время двух первых вызовов было создано 937 сущностей, в последующих вызовах - 936 сущностей.
"java.util.regex.Matcher$ImmutableMatchResult" - вот сущность, которая создавалась только при первых двух вызовах (3 объекта, 96 байт).
При первом запуске утилиты было создано 5_759_925 объектов, общим объемом 195_135_952 байт.
При последнем запуске утилиты (перед самым завершением размещения заявок в хранилище) было создано 7_382_085 объектов, общим объемом 261_342_080 байт.
Всего было создано 16 сущностей, которые имеют непосредственное отношение к работающей программе (т.е. с названием типа ru.job4j.tracker."НазваниеКласса"). Для 15-ти сущностей было создано по одному объекту. Из 15 сущностей две сущности имеют практически одинаковые названия "ru.job4j.tracker.DeleteAllItems" и "ru.job4j.tracker.DeleteAllItems$$Lambda$96/0x0000000800c921c0" - полагаю, что второй объект связан с выражением "Item::getId" (ссылка на метод).
Сущность №16 "ru.job4j.tracker.Item" была создана в количестве 412_690 объектов общим объемом 9_904_560 байт (при первом запуске утилиты); при последнем запуске значения увеличились - 441_673 объектов, объемом 10_600_152 байт. Для чего создаются лишние объекты - не понятно.
При аналогичном многократном запуске утилиты во время удаления заявок всегда создавалось 935 сущностей разных типов. Причем сущность "ru.job4j.tracker.Item" всегда была показана в количестве 400_000 объектов общим объемом 9_600_000 байт.
При добавлении и удалении заявок создается сущность "org.postgresql.core.Tuple" - количество объектов и объем всегда равны сущности "ru.job4j.tracker.Item" - видимо, эта сущность тоже имеет непосредственное отношение к программе.
Остался открытым вопрос "можно увидеть какие объекты ожидают удаления".

jstat -gc 12676 5s 450
В программе производится добавление 400 тысяч заявок в хранилище, затем ~80 секунд никаких действий не совершается, затем удаление всех заявок из хранилища, затем ~80 секунд никаких действий не совершается (утилита работала на протяжении всех четырех этапов).
S0C: Current survivor space 0 capacity (KB), S1C: Current survivor space 1 capacity (KB).
S0U: Survivor space 0 utilization (KB), S1U: Survivor space 1 utilization (KB).
EC: Current eden space capacity (KB), EU: Eden space utilization (KB).
OC: Current old space capacity (KB), OU: Old space utilization (KB).
MC: Metaspace capacity (KB), MU: Metaspace utilization (KB).
CCSC: Compressed class space capacity (KB), CCSU: Compressed class space used (KB).
YGC: Number of young generation garbage collection (GC) events, YGCT: Young generation garbage collection time.
FGC: Number of full GC events.
FGCT: Full garbage collection time, GCT: Total garbage collection time.

Текущая емкость сохраняемого space 0 (S0C) - значение 0,0KB на всем протяжении работы утилиты.
Текущая емкость сохраняемого space 1 (S1C): 38 тактов (~190 секунд) значение 1024,0KB, 1 такт = 3072,0KB, 2 такта = 9216,0KB. Затем резкое снижение до значения 1024,0KB, которое и сохранялось до завершения работы утилиты.
Область space 0 заняла место (S0U) - значение 0,0KB на всем протяжении работы утилиты.
Область space 1 заняла место (S1U) - минимальное значение 2,0KB, затем рост 12.1, 14.1, 16.1. Затем на три такта достигнут пик значений 3072,0KB и 9216,0KB - причем такты совпадают по времени с параметром S1C. Далее на четыре такта снижение до 607,0KB, и затем до значения 50,6KB, которое и сохранялось до завершения работы утилиты.
Текущая емкость пространства Eden (EC) - 103424,0KB начальное значение, рост до 245760,0KB, снижение до 62464,0KB, рост до 122880,0KB, снижение до 99328,0KB.
Используемая область Eden (EU) - 25600,0 - 51200,0 - 91136,0 - 102400,0 - 175104,0 - 183296,0 - 156672,0 - 122880,0 - 63488,0 - 21504,0 - 7168,0 - 50176,0 - 72704,0 - 95232,0 - 31744,0.
Емкость старого региона (OC) - 357376,0 - 319488,0 - 242688,0 - 222208,0 - 265216,0 - 215040,0 - 372736,0 - 320512,0 - 39936,0.
Используемое пространство старого региона (OU) - 165219,0 - 140800,0 - 157059,0 - 167664,5 - 39664,5.
Емкость метапространства (MC) - 6528,0 KB.
Используемое пространство метапространства (MU) - 6347,1 - 6351,4 - 6352,4.
Объем областей сжатого пространства (CCSC) - 704,0KB на всем протяжении работы утилиты.
Области пространства сжатого класса (CCSU) - 618,7KB на всем протяжении работы утилиты.
Количество событий Young GC, которые произошли на данный момент (YGC) - поэтапное увеличение от 60 до 72.
Количество времени, проведённого молодёжью в GC (YGCT) - поэтапное увеличение от 0,511 до 0,662.
Количество событий Full GC , которые произошли на данный момент (FGC) - 0 на всем протяжении работы утилиты.
Количество времени полного GC, потраченного до настоящего времени (FGCT) - 0,000 на всем протяжении работы утилиты.
CGC - не нашел описания параметра; значения 6, затем 8, затем 10 на протяжении работы утилиты.
CGCT - не нашел описания параметра; значения 0.017, затем 0.018, затем 0.019 на протяжении работы утилиты.
Общее количество времени, проведенного GC (GCT) - увеличение значений от 0.528 до 0.681.
Ну и дальше описание параметров я изучил на https://coderlessons.com/articles/java/jstat-analiz.
По цифрам видны все четыре этапа работы программы (бездействие-создание заявок-бездействие-удаление заявок).
Сборщик мусора, получается, ни разу не включился, если значение 0 всегда.

jconsole
В программе сперва бездействие, затем производится добавление 400 тысяч заявок в хранилище, затем ~80 секунд никаких действий не совершается, затем удаление всех заявок из хранилища, затем ~80 секунд никаких действий не совершается (утилита работала на протяжении всех пяти этапов).
Максимальный предусмотренный размер кучи 2.1GB. Используемый размер 25Mb, затем рост 225Mb, снижение до 50Mb, рост до 75Mb, снижение до 25Mb. Далее медленный рост до 70Mb (в IDEA уже давно никаких действий не происходит), после чего резкое снижение до 10Mb.
Threads - вначале число 15, затем 17, и снова 15.
2946 - общее число загруженных классов.
Garbage collector: Name = 'G1 Young Generation', Collections = 159, Total time spent = 0,922 seconds.
Garbage collector: Name = 'G1 Old Generation', Collections = 0, Total time spent = 0,000 seconds.
Из этих двух строк получается, что в старое поколение и не перешло ничего, думаю.